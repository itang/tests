buildscript {
    project.ext.kotlin_version = '1.0.1-2'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
  id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: "kotlin"
apply plugin: 'application'

repositories {
    maven {
        url "http://dl.bintray.com/andsel/maven/"
    }
    mavenCentral()

    maven {
        url "http://www.haoshuju.net:8078/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "io.moquette:moquette-broker:0.8.1"
    compile 'org.fusesource.mqtt-client:mqtt-client:1.12'
    //compile 'org.mapdb:mapdb:3.0.0-M4'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.1.7'

    //compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    //compile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

mainClassName = 'demo.MainKt'
defaultTasks 'run'

task fatCapsule(type: FatCapsule) {
    applicationClass project.mainClassName
}

task fatRun(type: Exec, dependsOn: 'fatCapsule') {
    workingDir "./build/libs"

    commandLine "java", "-jar", "${project.name}-capsule.jar"

    //store the output instead of printing to the console:
    //standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    //ext.output = {
    //    return standardOutput.toString()
    //}
}

task run_client1(type:JavaExec) {
    main = 'demo.Client1Kt'
    classpath = sourceSets.main.runtimeClasspath
}

task run_client2(type:JavaExec) {
    main = 'demo.Client2Kt'
    classpath = sourceSets.main.runtimeClasspath
}

task run_client3(type:JavaExec) {
    main = 'demo.Client3Kt'
    classpath = sourceSets.main.runtimeClasspath
}

task run_client4(type:JavaExec) {
    main = 'demo.ClientAsyncKt'
    classpath = sourceSets.main.runtimeClasspath
}
